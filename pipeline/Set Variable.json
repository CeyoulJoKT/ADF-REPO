{
	"name": "Set Variable",
	"properties": {
		"activities": [
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "id1",
					"value": "SELECT \n    -- Query 1: Basic Employee Details\n    e.employee_id AS employee_id,\n    e.name AS employee_name,\n    ISNULL(m.name, 'No Manager') AS manager_name,"
				}
			},
			{
				"name": "Lookup1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set variable6",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat(variables('id1'),variables('id3'),variables('id4'),variables('id5'),variables('id6'))",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable9",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set variable3",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "id3",
					"value": {
						"value": "(SELECT COUNT(*) FROM Employee) AS total_employees,\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set variable4",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set variable3",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "id4",
					"value": {
						"value": "d.department,\n    COUNT(*) AS department_employee_count,",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set variable5",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set variable4",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "id5",
					"value": {
						"value": "SUM(e.salary) AS department_total_salary,\n    AVG(e.salary) AS department_average_salary,",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set variable6",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set variable5",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "id6",
					"value": {
						"value": "(SELECT COUNT(*) FROM Employee r WHERE r.manager_id = e.employee_id) AS direct_reports_count\n\nFROM \n    Employee e\nLEFT JOIN \n    Employee m ON e.manager_id = m.employee_id\nLEFT JOIN \n    (\n        SELECT \n            department,\n            COUNT(*) AS department_employee_count\n        FROM \n            Employee\n        GROUP BY \n            department\n    ) d ON e.department = d.department\n\nGROUP BY \n    e.employee_id, e.name, m.name, d.department, e.salary\n\nORDER BY \n    e.employee_id;",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"id": {
				"type": "String"
			},
			"dealers": {
				"type": "String"
			},
			"id2": {
				"type": "String"
			},
			"id3": {
				"type": "String"
			},
			"id1": {
				"type": "String"
			},
			"id4": {
				"type": "String"
			},
			"id5": {
				"type": "String"
			},
			"id6": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Refresher"
		},
		"annotations": []
	}
}