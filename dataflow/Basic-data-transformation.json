{
	"name": "Basic-data-transformation",
	"properties": {
		"folder": {
			"name": "Dataflow-transformation"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as string,",
				"          Date as string,",
				"          Zip as string,",
				"          Units as string,",
				"          Revenue as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['*.csv']) ~> source1",
				"source(output(",
				"          ProductID as string,",
				"          Date as string,",
				"          Zip as string,",
				"          Units as string,",
				"          Revenue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['*.csv']) ~> source2",
				"source1, derivedColumn2 union(byName: true)~> union1",
				"source2 derive(Country = 'USA') ~> derivedColumn2",
				"union1 keyGenerate(output({1000} as long),",
				"     startAt: 100L,",
				"     stepValue: 2L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          UQ_Key = {1000},",
				"          ProductID,",
				"          Date,",
				"          Zip,",
				"          Revenue,",
				"          Country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          {Age } as string,",
				"          Country as string",
				"     ),",
				"     partitionFileNames:['Test'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}